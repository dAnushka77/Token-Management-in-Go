// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: tokenmgmt/tokenmgmt.proto

package go_tokenmgmt_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenManagementClient is the client API for TokenManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenManagementClient interface {
	Create(ctx context.Context, in *Token_Create_I, opts ...grpc.CallOption) (*Token_Create_O, error)
	Drop(ctx context.Context, in *Token_Drop_I, opts ...grpc.CallOption) (*Token_Drop_O, error)
	Write(ctx context.Context, in *Token_Write_I, opts ...grpc.CallOption) (*Token_Write_O, error)
	Read(ctx context.Context, in *Token_Read_I, opts ...grpc.CallOption) (*Token_Read_O, error)
	CommunicationInfo(ctx context.Context, in *Comm_I, opts ...grpc.CallOption) (*Comm_O, error)
}

type tokenManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenManagementClient(cc grpc.ClientConnInterface) TokenManagementClient {
	return &tokenManagementClient{cc}
}

func (c *tokenManagementClient) Create(ctx context.Context, in *Token_Create_I, opts ...grpc.CallOption) (*Token_Create_O, error) {
	out := new(Token_Create_O)
	err := c.cc.Invoke(ctx, "/tokenmgmt.TokenManagement/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenManagementClient) Drop(ctx context.Context, in *Token_Drop_I, opts ...grpc.CallOption) (*Token_Drop_O, error) {
	out := new(Token_Drop_O)
	err := c.cc.Invoke(ctx, "/tokenmgmt.TokenManagement/Drop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenManagementClient) Write(ctx context.Context, in *Token_Write_I, opts ...grpc.CallOption) (*Token_Write_O, error) {
	out := new(Token_Write_O)
	err := c.cc.Invoke(ctx, "/tokenmgmt.TokenManagement/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenManagementClient) Read(ctx context.Context, in *Token_Read_I, opts ...grpc.CallOption) (*Token_Read_O, error) {
	out := new(Token_Read_O)
	err := c.cc.Invoke(ctx, "/tokenmgmt.TokenManagement/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenManagementClient) CommunicationInfo(ctx context.Context, in *Comm_I, opts ...grpc.CallOption) (*Comm_O, error) {
	out := new(Comm_O)
	err := c.cc.Invoke(ctx, "/tokenmgmt.TokenManagement/CommunicationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenManagementServer is the server API for TokenManagement service.
// All implementations must embed UnimplementedTokenManagementServer
// for forward compatibility
type TokenManagementServer interface {
	Create(context.Context, *Token_Create_I) (*Token_Create_O, error)
	Drop(context.Context, *Token_Drop_I) (*Token_Drop_O, error)
	Write(context.Context, *Token_Write_I) (*Token_Write_O, error)
	Read(context.Context, *Token_Read_I) (*Token_Read_O, error)
	CommunicationInfo(context.Context, *Comm_I) (*Comm_O, error)
	mustEmbedUnimplementedTokenManagementServer()
}

// UnimplementedTokenManagementServer must be embedded to have forward compatible implementations.
type UnimplementedTokenManagementServer struct {
}

func (UnimplementedTokenManagementServer) Create(context.Context, *Token_Create_I) (*Token_Create_O, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTokenManagementServer) Drop(context.Context, *Token_Drop_I) (*Token_Drop_O, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Drop not implemented")
}
func (UnimplementedTokenManagementServer) Write(context.Context, *Token_Write_I) (*Token_Write_O, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedTokenManagementServer) Read(context.Context, *Token_Read_I) (*Token_Read_O, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedTokenManagementServer) CommunicationInfo(context.Context, *Comm_I) (*Comm_O, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommunicationInfo not implemented")
}
func (UnimplementedTokenManagementServer) mustEmbedUnimplementedTokenManagementServer() {}

// UnsafeTokenManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenManagementServer will
// result in compilation errors.
type UnsafeTokenManagementServer interface {
	mustEmbedUnimplementedTokenManagementServer()
}

func RegisterTokenManagementServer(s grpc.ServiceRegistrar, srv TokenManagementServer) {
	s.RegisterService(&TokenManagement_ServiceDesc, srv)
}

func _TokenManagement_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token_Create_I)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenManagementServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenmgmt.TokenManagement/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenManagementServer).Create(ctx, req.(*Token_Create_I))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenManagement_Drop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token_Drop_I)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenManagementServer).Drop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenmgmt.TokenManagement/Drop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenManagementServer).Drop(ctx, req.(*Token_Drop_I))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenManagement_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token_Write_I)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenManagementServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenmgmt.TokenManagement/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenManagementServer).Write(ctx, req.(*Token_Write_I))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenManagement_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token_Read_I)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenManagementServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenmgmt.TokenManagement/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenManagementServer).Read(ctx, req.(*Token_Read_I))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenManagement_CommunicationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comm_I)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenManagementServer).CommunicationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenmgmt.TokenManagement/CommunicationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenManagementServer).CommunicationInfo(ctx, req.(*Comm_I))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenManagement_ServiceDesc is the grpc.ServiceDesc for TokenManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tokenmgmt.TokenManagement",
	HandlerType: (*TokenManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TokenManagement_Create_Handler,
		},
		{
			MethodName: "Drop",
			Handler:    _TokenManagement_Drop_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _TokenManagement_Write_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _TokenManagement_Read_Handler,
		},
		{
			MethodName: "CommunicationInfo",
			Handler:    _TokenManagement_CommunicationInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tokenmgmt/tokenmgmt.proto",
}
